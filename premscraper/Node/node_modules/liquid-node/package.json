{
  "name": "liquid-node",
  "author": {
    "name": "Marcel Jackwerth",
    "email": "marcel@northdocks.com"
  },
  "contributors": [
    {
      "name": "Tony Heupel",
      "email": "tonyheupel@gmail.com"
    },
    {
      "name": "Henry Bergius",
      "email": "henri.bergius@iki.fi"
    }
  ],
  "description": "Node.js port of Tobias LÃ¼tke's Liquid template engine.",
  "version": "2.5.0",
  "license": "MIT",
  "homepage": "https://github.com/sirlantis/liquid-node",
  "bugs": {
    "url": "https://github.com/sirlantis/liquid-node/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sirlantis/liquid-node.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/index.js",
  "engines": {
    "node": ">= 0.10"
  },
  "dependencies": {
    "strftime": "~0.8.0"
  },
  "peerDependencies": {
    "bluebird": "^2.1.3"
  },
  "devDependencies": {
    "chai": "~1.9.1",
    "chai-as-promised": "~4.1.1",
    "coffee-script": "~1.7.1",
    "coffeelint": "^1.5.2",
    "coveralls": "^2.10.1",
    "jscoverage": "^0.5.4",
    "mocha": "~1.20.1",
    "mocha-lcov-reporter": "0.0.1",
    "sinon": "^1.10.2",
    "sinon-chai": "^2.5.0",
    "bluebird": "^2.3.10"
  },
  "scripts": {
    "test": "mocha --compilers coffee:coffee-script/register -R spec test",
    "compile": "rm -rf lib && coffee --output lib --map --compile src",
    "prepublish": "npm run precommit && npm run compile",
    "precommit": "npm test && npm run lint",
    "coverage": "npm run compile && LIQUID_NODE_COVERAGE=1 mocha --compilers coffee:coffee-script/register -r jscoverage --reporter mocha-lcov-reporter test | coveralls",
    "coverage-report": "npm run compile && LIQUID_NODE_COVERAGE=1 mocha --compilers coffee:coffee-script/register -r jscoverage --covout html test",
    "lint": "coffeelint src/** test/**"
  },
  "readme": "# Liquid with Node.js\n\n[![NPM version](https://img.shields.io/npm/v/liquid-node.svg?style=flat)](https://www.npmjs.org/package/liquid-node)\n[![Downloads](http://img.shields.io/npm/dm/liquid-node.svg?style=flat)](https://www.npmjs.org/package/liquid-node)\n[![GitHub Issues](http://img.shields.io/github/issues/sirlantis/liquid-node.svg?style=flat)](https://github.com/sirlantis/liquid-node/issues)\n<br>\n[![Build Status](https://img.shields.io/travis/sirlantis/liquid-node.svg?style=flat)](https://travis-ci.org/sirlantis/liquid-node)\n[![Coverage Status](https://img.shields.io/coveralls/sirlantis/liquid-node.svg?style=flat)](https://coveralls.io/r/sirlantis/liquid-node?branch=master)\n[![Dependency Status](http://img.shields.io/david/sirlantis/liquid-node.svg?style=flat)](https://david-dm.org/sirlantis/liquid-node)\n[![devDependency Status](http://img.shields.io/david/dev/sirlantis/liquid-node.svg?style=flat)](https://david-dm.org/sirlantis/liquid-node#info=devDependencies)\n\n> LiquidNode is a port of the original Liquid template engine from *Ruby* to *Node.js*.\n> It uses Promises to support non-blocking/asynchronous variables, filters, and blocks.\n\n## Features\n\n- Supports asynchronous variables, tags, functions and filters (helpers)\n- Allows you to add custom tags and filters easily\n- Uses [bluebird](https://github.com/petkaantonov/bluebird) for super-fast [Promises/A+](http://promisesaplus.com/)\n- Supports full liquid syntax\n- Based on original Ruby code\n- Written in CoffeeScript\n- High test coverage\n\n## What does it look like?\n\n```html\n<ul id=\"products\">\n  {% for product in products %}\n    <li>\n      <h2>{{ product.name }}</h2>\n      Only {{ product.price | price }}\n\n      {{ product.description | prettyprint | paragraph }}\n    </li>\n  {% endfor %}\n</ul>\n```\n\n## Installation\n\n```\nnpm install liquid-node --save\n```\n\n## Usage\n\nLiquid supports a very simple API based around the Liquid.Engine class.\nFor standard use you can just pass it the content of a file and call render with an object.\n\n```javascript\nLiquid = require(\"liquid-node\")\nvar engine = new Liquid.Engine\n\nengine\n  .parse(\"hi {{name}}\")\n  .then(function(template) { return template.render({ name: \"tobi\" }); })\n  .then(function(result) { console.log(result) });\n  \n// or\n\nengine\n  .parseAndRender(\"hi {{name}}\", { name: \"tobi\" })\n  .then(function(result) { console.log(result) });\n```\n\n### Usage with Connect\n\n```javascript\napp.get(function(req, res) {\n  engine\n    .parseAndRender(\"hi {{name}}\", { name: \"tobi\" })\n    .nodeify(function(err, result) {\n      if (err) {\n        res.end(\"ERROR: \" + err);\n      } else {\n        res.end(result);\n      }\n    });\n});\n```\n\n### Registration of new filters\n\n```javascript\nengine.registerFilters({\n  myFilter: function(input) {\n    return String(input).toUpperCase()\n  }\n});\n```\n\n### Registration of new Tags\n\nSince the code is based on the Ruby implementation we use CoffeeScript's `class`\nwhich is a little bit difficult to write in pure JavaScript.\nTake a look at the [existing tags](https://github.com/sirlantis/liquid-node/tree/master/src/liquid/tags)\nto see how to implement them.\n\n```coffeescript\nclass MyTag extends Liquid.Tag\n  render: ->\n    \"that's me!\"\n    \nengine.registerTag \"MyTag\", MyTag\n```\n\n## How to run the tests\n\n```\nnpm test\n```\n\n## Similar libraries\n\n* [darthapo's Liquid.js](https://github.com/darthapo/liquid.js) is liquid ported to JavaScript to be run within the browser. It doesn't handle asynchrony.\n* [tchype's Liquid.js](https://github.com/tchype/liquid.js) is `liquid-node` wrapped to run in a browser.\n\n## License\n\nLiquidNode is released under the [MIT license](http://www.opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "_id": "liquid-node@2.5.0",
  "_shasum": "fba74d1036f80403739571248aeb633e573476b1",
  "_from": "liquid-node@2.5.0",
  "_resolved": "https://registry.npmjs.org/liquid-node/-/liquid-node-2.5.0.tgz"
}
