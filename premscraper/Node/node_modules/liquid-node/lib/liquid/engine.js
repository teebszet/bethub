// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid, Promise,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  Liquid = require("../liquid");

  Promise = require("bluebird");

  module.exports = Liquid.Engine = (function() {
    function Engine() {
      var isBlockOrTagBaseClass, isSubclassOf, tag, tagName;
      this.tags = {};
      this.Strainer = function(context) {
        this.context = context;
      };
      this.registerFilters(Liquid.StandardFilters);
      this.fileSystem = new Liquid.BlankFileSystem;
      isSubclassOf = function(klass, ofKlass) {
        var _ref;
        if (typeof klass !== 'function') {
          return false;
        } else if (klass === ofKlass) {
          return true;
        } else {
          return isSubclassOf((_ref = klass.__super__) != null ? _ref.constructor : void 0, ofKlass);
        }
      };
      for (tagName in Liquid) {
        if (!__hasProp.call(Liquid, tagName)) continue;
        tag = Liquid[tagName];
        if (!isSubclassOf(tag, Liquid.Tag)) {
          continue;
        }
        isBlockOrTagBaseClass = [Liquid.Tag, Liquid.Block].indexOf(tag.constructor) >= 0;
        if (!isBlockOrTagBaseClass) {
          this.registerTag(tagName.toLowerCase(), tag);
        }
      }
    }

    Engine.prototype.registerTag = function(name, tag) {
      return this.tags[name] = tag;
    };

    Engine.prototype.registerFilters = function() {
      var filters;
      filters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return filters.forEach((function(_this) {
        return function(filter) {
          var k, v, _results;
          _results = [];
          for (k in filter) {
            if (!__hasProp.call(filter, k)) continue;
            v = filter[k];
            if (v instanceof Function) {
              _results.push(_this.Strainer.prototype[k] = v);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
    };

    Engine.prototype.parse = function(source) {
      var template;
      template = new Liquid.Template;
      return template.parse(this, source);
    };

    Engine.prototype.parseAndRender = function() {
      var args, source;
      source = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.parse(source).then(function(template) {
        return template.render.apply(template, args);
      });
    };

    Engine.prototype.registerFileSystem = function(fileSystem) {
      if (!(fileSystem instanceof Liquid.BlankFileSystem)) {
        throw Liquid.ArgumentError("Must be subclass of Liquid.BlankFileSystem");
      }
      return this.fileSystem = fileSystem;
    };

    return Engine;

  })();

}).call(this);

//# sourceMappingURL=engine.map
