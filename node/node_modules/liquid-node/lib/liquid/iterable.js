// Generated by CoffeeScript 1.7.1
(function() {
  var Iterable, IterableForArray, Promise, Range, isString,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Range = require("./range");

  Promise = require("bluebird");

  isString = function(input) {
    return Object.prototype.toString.call(input) === "[object String]";
  };

  module.exports = Iterable = (function() {
    function Iterable() {}

    Iterable.prototype.first = function() {
      return this.slice(0, 1).then(function(a) {
        return a[0];
      });
    };

    Iterable.prototype.map = function() {
      var _ref;
      return (_ref = this.toArray()).map.apply(_ref, arguments);
    };

    Iterable.prototype.sort = function() {
      var args;
      args = arguments;
      return this.toArray().then(function(a) {
        return a.sort.apply(a, args);
      });
    };

    Iterable.prototype.toArray = function() {
      return this.slice(0);
    };

    Iterable.prototype.slice = function() {
      throw new Error("" + this.constructor.name + ".slice() not implemented");
    };

    Iterable.prototype.last = function() {
      throw new Error("" + this.constructor.name + ".last() not implemented");
    };

    Iterable.cast = function(v) {
      if (v instanceof Iterable) {
        return v;
      } else if (v instanceof Range) {
        return new IterableForArray(v.toArray());
      } else if (Array.isArray(v) || isString(v)) {
        return new IterableForArray(v);
      } else if (v != null) {
        return new IterableForArray([v]);
      } else {
        return new IterableForArray([]);
      }
    };

    return Iterable;

  })();

  IterableForArray = (function(_super) {
    __extends(IterableForArray, _super);

    function IterableForArray(array) {
      this.array = array;
    }

    IterableForArray.prototype.slice = function() {
      var _ref;
      return Promise.cast((_ref = this.array).slice.apply(_ref, arguments));
    };

    IterableForArray.prototype.last = function() {
      return Promise.cast(this.array[this.array.length - 1]);
    };

    return IterableForArray;

  })(Iterable);

}).call(this);

//# sourceMappingURL=iterable.map
