// Generated by CoffeeScript 1.7.1
(function() {
  var IfChanged, Liquid, Promise,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require("../../liquid");

  Promise = require("bluebird");

  module.exports = IfChanged = (function(_super) {
    __extends(IfChanged, _super);

    function IfChanged() {
      return IfChanged.__super__.constructor.apply(this, arguments);
    }

    IfChanged.prototype.render = function(context) {
      return context.stack((function(_this) {
        return function() {
          var rendered;
          rendered = _this.renderAll(_this.nodelist, context);
          return Promise.cast(rendered).then(function(output) {
            output = Liquid.Helpers.toFlatString(output);
            if (output !== context.registers.ifchanged) {
              return context.registers.ifchanged = output;
            } else {
              return "";
            }
          });
        };
      })(this));
    };

    return IfChanged;

  })(Liquid.Block);

}).call(this);

//# sourceMappingURL=ifchanged.map
