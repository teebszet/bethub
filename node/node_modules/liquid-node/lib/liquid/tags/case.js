// Generated by CoffeeScript 1.7.1
(function() {
  var Case, Liquid, Promise,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require("../../liquid");

  Promise = require("bluebird");

  module.exports = Case = (function(_super) {
    var Syntax, SyntaxHelp, WhenSyntax;

    __extends(Case, _super);

    SyntaxHelp = "Syntax Error in tag 'case' - Valid syntax: case [expression]";

    Syntax = RegExp("(" + Liquid.QuotedFragment.source + ")");

    WhenSyntax = RegExp("(" + Liquid.QuotedFragment.source + ")(?:(?:\\s+or\\s+|\\s*\\,\\s*)(" + Liquid.QuotedFragment.source + "))?");

    function Case(template, tagName, markup) {
      var match;
      this.blocks = [];
      match = Syntax.exec(markup);
      if (!match) {
        throw new Liquid.SyntaxError(SyntaxHelp);
      }
      this.markup = markup;
      Case.__super__.constructor.apply(this, arguments);
    }

    Case.prototype.unknownTag = function(tag, markup) {
      if (tag === "when" || tag === "else") {
        return this.pushBlock(tag, markup);
      } else {
        return Case.__super__.unknownTag.apply(this, arguments);
      }
    };

    Case.prototype.render = function(context) {
      return context.stack((function(_this) {
        return function() {
          return Promise.reduce(_this.blocks, function(chosenBlock, block) {
            if (chosenBlock != null) {
              return chosenBlock;
            }
            return Promise["try"](function() {
              return block.evaluate(context);
            }).then(function(ok) {
              if (ok) {
                return block;
              }
            });
          }, null).then(function(block) {
            if (block != null) {
              return _this.renderAll(block.attachment, context);
            } else {
              return "";
            }
          });
        };
      })(this));
    };

    Case.prototype.pushBlock = function(tag, markup) {
      var block, expressions, nodelist, value, _i, _len, _ref, _results;
      if (tag === "else") {
        block = new Liquid.ElseCondition();
        this.blocks.push(block);
        return this.nodelist = block.attach([]);
      } else {
        expressions = Liquid.Helpers.scan(markup, WhenSyntax);
        nodelist = [];
        _ref = expressions[0];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          value = _ref[_i];
          if (value) {
            block = new Liquid.Condition(this.markup, '==', value);
            this.blocks.push(block);
            _results.push(this.nodelist = block.attach(nodelist));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return Case;

  })(Liquid.Block);

}).call(this);

//# sourceMappingURL=case.map
