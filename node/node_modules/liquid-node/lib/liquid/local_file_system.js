// Generated by CoffeeScript 1.7.1
(function() {
  var Fs, Liquid, Path, Promise,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require("../liquid");

  Promise = require("bluebird");

  Fs = Promise.promisifyAll(require("fs"));

  Path = require("path");

  module.exports = Liquid.LocalFileSystem = (function(_super) {
    var PathPattern;

    __extends(LocalFileSystem, _super);

    PathPattern = /^[^.\/][a-zA-Z0-9-_\/]+$/;

    function LocalFileSystem(root, extension) {
      if (extension == null) {
        extension = "html";
      }
      this.root = root;
      this.fileExtension = extension;
    }

    LocalFileSystem.prototype.readTemplateFile = function(templatePath) {
      return this.fullPath(templatePath).then(function(fullPath) {
        return Fs.readFileAsync(fullPath, 'utf8')["catch"](function(err) {
          throw new Liquid.FileSystemError("Error loading template: " + err.message);
        });
      });
    };

    LocalFileSystem.prototype.fullPath = function(templatePath) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (!PathPattern.test(templatePath)) {
            reject(new Liquid.ArgumentError("Illegal template name '" + templatePath + "'"));
          }
          return resolve(Path.resolve(Path.join(_this.root, Path.dirname(templatePath), Path.basename(templatePath + ("." + _this.fileExtension)))));
        };
      })(this));
    };

    return LocalFileSystem;

  })(Liquid.BlankFileSystem);

}).call(this);

//# sourceMappingURL=local_file_system.map
